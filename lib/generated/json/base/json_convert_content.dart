// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutterapp/model/base_set_entitiy.dart';
import 'package:flutterapp/model/out_storage_weight_entitiy.dart';
import 'package:flutterapp/model/sell_out_entitiy.dart';
import 'package:flutterapp/model/sell_trade_detail_entitiy.dart';
import 'package:flutterapp/model/user_login_entitiy.dart';
import 'package:flutterapp/model/user_search_entitiy.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<BaseSetEntitiy>[] is M) {
      return data.map<BaseSetEntitiy>((Map<String, dynamic> e) => BaseSetEntitiy.fromJson(e))
          .toList() as M;
    }
    if (<BaseSetData>[] is M) {
      return data.map<BaseSetData>((Map<String, dynamic> e) => BaseSetData.fromJson(e))
          .toList() as M;
    }
    if (<BaseSetDataBaseSettings>[] is M) {
      return data.map<BaseSetDataBaseSettings>((Map<String, dynamic> e) =>
          BaseSetDataBaseSettings.fromJson(e)).toList() as M;
    }
    if (<OutStorageWeightEntitiy>[] is M) {
      return data.map<OutStorageWeightEntitiy>((Map<String, dynamic> e) =>
          OutStorageWeightEntitiy.fromJson(e)).toList() as M;
    }
    if (<OutStorageWeightData>[] is M) {
      return data.map<OutStorageWeightData>((Map<String, dynamic> e) =>
          OutStorageWeightData.fromJson(e)).toList() as M;
    }
    if (<SellOutEntitiy>[] is M) {
      return data.map<SellOutEntitiy>((Map<String, dynamic> e) => SellOutEntitiy.fromJson(e))
          .toList() as M;
    }
    if (<SellOutData>[] is M) {
      return data.map<SellOutData>((Map<String, dynamic> e) => SellOutData.fromJson(e))
          .toList() as M;
    }
    if (<SellOutDataData>[] is M) {
      return data.map<SellOutDataData>((Map<String, dynamic> e) => SellOutDataData.fromJson(e))
          .toList() as M;
    }
    if (<SellTradeDetailEntitiy>[] is M) {
      return data.map<SellTradeDetailEntitiy>((Map<String, dynamic> e) =>
          SellTradeDetailEntitiy.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailData>[] is M) {
      return data.map<SellTradeDetailData>((Map<String, dynamic> e) =>
          SellTradeDetailData.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailDataCustomer>[] is M) {
      return data.map<SellTradeDetailDataCustomer>((Map<String, dynamic> e) =>
          SellTradeDetailDataCustomer.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailDataDriver>[] is M) {
      return data.map<SellTradeDetailDataDriver>((Map<String, dynamic> e) =>
          SellTradeDetailDataDriver.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailDataBaseStation>[] is M) {
      return data.map<SellTradeDetailDataBaseStation>((Map<String, dynamic> e) =>
          SellTradeDetailDataBaseStation.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailDataGrainSalesOutWarehouseDto>[] is M) {
      return data.map<SellTradeDetailDataGrainSalesOutWarehouseDto>((Map<String, dynamic> e) =>
          SellTradeDetailDataGrainSalesOutWarehouseDto.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailDataGrainSalesOutWarehouseDtoGrainSalesOutWarehouseDetailDtoList>[] is M) {
      return data.map<
          SellTradeDetailDataGrainSalesOutWarehouseDtoGrainSalesOutWarehouseDetailDtoList>((
          Map<String, dynamic> e) =>
          SellTradeDetailDataGrainSalesOutWarehouseDtoGrainSalesOutWarehouseDetailDtoList.fromJson(
              e)).toList() as M;
    }
    if (<SellTradeDetailDataInWeightRecordDto>[] is M) {
      return data.map<SellTradeDetailDataInWeightRecordDto>((Map<String, dynamic> e) =>
          SellTradeDetailDataInWeightRecordDto.fromJson(e)).toList() as M;
    }
    if (<SellTradeDetailDataOutWeightRecordDto>[] is M) {
      return data.map<SellTradeDetailDataOutWeightRecordDto>((Map<String, dynamic> e) =>
          SellTradeDetailDataOutWeightRecordDto.fromJson(e)).toList() as M;
    }
    if (<UserLoginEntitiy>[] is M) {
      return data.map<UserLoginEntitiy>((Map<String, dynamic> e) => UserLoginEntitiy.fromJson(e))
          .toList() as M;
    }
    if (<UserLoginData>[] is M) {
      return data.map<UserLoginData>((Map<String, dynamic> e) => UserLoginData.fromJson(e))
          .toList() as M;
    }
    if (<UserSearchEntitiy>[] is M) {
      return data.map<UserSearchEntitiy>((Map<String, dynamic> e) => UserSearchEntitiy.fromJson(e))
          .toList() as M;
    }
    if (<UserSearchData>[] is M) {
      return data.map<UserSearchData>((Map<String, dynamic> e) => UserSearchData.fromJson(e))
          .toList() as M;
    }
    if (<UserSearchDataData>[] is M) {
      return data.map<UserSearchDataData>((Map<String, dynamic> e) =>
          UserSearchDataData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (BaseSetEntitiy).toString(): BaseSetEntitiy.fromJson,
    (BaseSetData).toString(): BaseSetData.fromJson,
    (BaseSetDataBaseSettings).toString(): BaseSetDataBaseSettings.fromJson,
    (OutStorageWeightEntitiy).toString(): OutStorageWeightEntitiy.fromJson,
    (OutStorageWeightData).toString(): OutStorageWeightData.fromJson,
    (SellOutEntitiy).toString(): SellOutEntitiy.fromJson,
    (SellOutData).toString(): SellOutData.fromJson,
    (SellOutDataData).toString(): SellOutDataData.fromJson,
    (SellTradeDetailEntitiy).toString(): SellTradeDetailEntitiy.fromJson,
    (SellTradeDetailData).toString(): SellTradeDetailData.fromJson,
    (SellTradeDetailDataCustomer).toString(): SellTradeDetailDataCustomer.fromJson,
    (SellTradeDetailDataDriver).toString(): SellTradeDetailDataDriver.fromJson,
    (SellTradeDetailDataBaseStation).toString(): SellTradeDetailDataBaseStation.fromJson,
    (SellTradeDetailDataGrainSalesOutWarehouseDto)
        .toString(): SellTradeDetailDataGrainSalesOutWarehouseDto.fromJson,
    (SellTradeDetailDataGrainSalesOutWarehouseDtoGrainSalesOutWarehouseDetailDtoList)
        .toString(): SellTradeDetailDataGrainSalesOutWarehouseDtoGrainSalesOutWarehouseDetailDtoList
        .fromJson,
    (SellTradeDetailDataInWeightRecordDto).toString(): SellTradeDetailDataInWeightRecordDto
        .fromJson,
    (SellTradeDetailDataOutWeightRecordDto).toString(): SellTradeDetailDataOutWeightRecordDto
        .fromJson,
    (UserLoginEntitiy).toString(): UserLoginEntitiy.fromJson,
    (UserLoginData).toString(): UserLoginData.fromJson,
    (UserSearchEntitiy).toString(): UserSearchEntitiy.fromJson,
    (UserSearchData).toString(): UserSearchData.fromJson,
    (UserSearchDataData).toString(): UserSearchDataData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}